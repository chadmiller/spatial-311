#!/bin/bash -eu

mkdir -p cache

dbname=spatial-info
owner=$(whoami)

sudo -u postgres createuser $owner || true
sudo -u postgres dropdb $dbname || true
sudo -u postgres createdb -O $owner $dbname

sudo -u postgres psql -b -d $dbname -c "CREATE EXTENSION postgis;"
sudo -u postgres psql -b -d $dbname -c "CREATE EXTENSION postgis_topology;"
sudo -u postgres psql -b -d $dbname -c "CREATE EXTENSION address_standardizer;"
sudo -u postgres psql -b -d $dbname -c "ALTER SCHEMA topology OWNER TO $owner;"

function download-and-extract () {
	description=$1
	url=$2
	t=$(mktemp -d)
	test -f "cache/$description" || wget -nv -O "cache/$description" $url
	cp "cache/$description" "$t/download"
	bestfile=$t/download
	sniffed=$(file -b "$t/download" |sed -r -e "s,length [0-9]+,,")
	if test "$sniffed" = "Zip archive data, at least v2.0 to extract"; then
		mv "$t/download" "$t/download".zip
		( cd $t && unzip download.zip >/dev/null; )
		bestfile=$(find "$t" \( -type f  -name \*.shp \) -o \( -type d -a -name \*.gdb \) |head -1)
		if test -z "$bestfile"; then
			echo "No useful file found in $t"
			exit 1
		fi
		sniffed=$(file -b "$bestfile" |sed -r -e "s, length [0-9]+,,")
	fi

	if test "$sniffed" = "directory"; then
		gdb_t=$t
		t=$(mktemp -d)

		ogr2ogr -f ESRI\ Shapefile "$t/shapefile" "$bestfile"
		rm -rf "$gdb_t"
		bestfile=$(find "$t" \( -type f  -name \*.shp \) -o \( -type d -a -name \*.gdb \) |head -1)
		sniffed=$(file -b "$bestfile" |sed -r -e "s, length [0-9]+,,")
	fi

	case "$sniffed" in
		"ESRI Shapefile version 1000 type Polygon")
			./shpimport "$bestfile" "$dbname" "$description" "$url" "$(date -u)"
			;;
		"directory")
			echo "We should have unwrapped a GDB to create shapefiles by now."
			;;
		*)
			echo "file $bestfile is unknown type $sniffed";
			;;
	esac
	rm -rf $t
}

psql -b -e $dbname -f schema.psql

## http://www.cityoforlando.net/publicworks/survey-links/
## http://cfgis.org/
## http://www.myregion.org/index.php?submenu=OrangeCounty&src=gendocs&ref=OrangeCounty&category=Collaboration
## http://www.seminolecountyfl.gov/departments-services/information-services/gis-geographic-information-systems/gis-data.stml
## http://www.fgdl.org/metadataexplorer/explorer.jsp

download-and-extract "Florida cities" 'https://ftp.fgdl.org/pub/state/par_citylm_2015.zip'
download-and-extract "Florida counties" 'ftp://ftp.fgdl.org/pub/state/county_sep15.zip'
download-and-extract "City of Orlando yard waste pickup days" 'https://data.cityoforlando.net/api/geospatial/w6u7-pfy5?method=export&format=Shapefile'
download-and-extract "City of Orlando garbage collection days" 'https://data.cityoforlando.net/api/geospatial/2ghq-vezc?method=export&format=Shapefile'
download-and-extract "City of Orlando recycling collection days" 'https://data.cityoforlando.net/api/geospatial/7gga-penv?method=export&format=Shapefile'
#download-and-extract "City of Casselberry" 'http://cfgis.org/cfgis/local/seminole/casselberry/citybnd.zip'
#download-and-extract "Metropolitan-Planning-Organizaion boundaries" 'http://cfgis.org/cfgis/regional/ecfrpc/Regional_Data/Central_Florida_MPO_Boundaries.zip'
download-and-extract "Seminole-County Commissioner Districts" 'http://www.apps.seminolecountyfl.gov/is/gis/GISData/Elect.gdb.zip'
download-and-extract "Florida legislature districting" 'http://www.flsenate.gov/PublishedContent/Session/Redistricting/Plans/SC14-1905/SC14-1905_shp.zip'


./fabricate-election-rows "$dbname"

lng=-81.2580419024558   # -81.3721594
lat=28.476347529487  # 28.5066056

set -x

#psql -d $dbname -c "SELECT GeometryType(region), note_markdown FROM parcel;"
#psql -d $dbname -c "SELECT parcel.note_markdown FROM parcel WHERE ST_Covers(region, ST_Point($lng,$lat));"
#psql -d $dbname -c "SELECT parcel.id FROM parcel WHERE ST_Contains(shape, ST_Point($lng,$lat));" 
#psql -d $dbname -c "SELECT parcel.note_markdown FROM parcel WHERE ST_Contains(region, ST_MakePoint($lng,$lat));"

psql -b -d $dbname -c "SELECT topic.name, parcel_tags.key, parcel_tags.value FROM parcel_tags LEFT JOIN parcel on (parcel_tags.parcel = parcel.id) LEFT JOIN import ON (parcel.import=import.id) LEFT JOIN topic on (topic.id=import.topic) WHERE ST_Contains(parcel.shape, ST_MakePoint($lng,$lat)) ORDER BY parcel_tags.ordering, topic.name;"

#psql -b -d $dbname -c "select distinct topic.name, ST_SRID(parcel.shape) from parcel left join import on (parcel.import=import.id) left join topic on (topic.id=import.topic) order by topic.name;"

#psql -b -d $dbname -c "select topic.name, parcel_tags.value, ST_SRID(parcel.shape), ST_AsText(ST_Centroid(parcel.shape)) from parcel_tags LEFT JOIN parcel ON (parcel_tags.parcel=parcel.id) left join import on (parcel.import=import.id) left join topic on (topic.id=import.topic) order by topic.name;"
#psql -d $dbname -c "select topic.name, import.source from parcel_tags left join parcel on parcel_tags.parcel=parcel.id left join import on parcel.import = import.id left join topic on topic.id=import.topic where LOWER(parcel_tags.key)='name';" |cat
